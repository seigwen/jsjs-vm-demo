/**
* 源代码
*/
function f(){
	var a = 1;
	return function(){console.log(a)}
}
f()();

/**
* 输出
*/
ast: {"type":"Program","start":0,"end":874,"body":[{"type":"FunctionDeclaration","start":804,"end":866,"id":{"type":"Identifier","start":813,"end":814,"name":"f"},"params":[],"body":{"type":"BlockStatement","start":816,"end":866,"body":[{"type":"VariableDeclaration","start":819,"end":829,"declarations":[{"type":"VariableDeclarator","start":823,"end":828,"id":{"type":"Identifier","start":823,"end":824,"name":"a"},"init":{"type":"Literal","start":827,"end":828,"value":1,"raw":"1"}}],"kind":"var"},{"type":"ReturnStatement","start":831,"end":864,"argument":{"type":"FunctionExpression","start":838,"end":864,"id":null,"params":[],"body":{"type":"BlockStatement","start":848,"end":864,"body":[{"type":"ExpressionStatement","start":849,"end":863,"expression":{"type":"CallExpression","start":849,"end":863,"callee":{"type":"MemberExpression","start":849,"end":860,"object":{"type":"Identifier","start":849,"end":856,"name":"console"},"property":{"type":"Identifier","start":857,"end":860,"name":"log"},"computed":false},"arguments":[{"type":"Identifier","start":861,"end":862,"name":"a"}]}}]},"expression":false}}]},"expression":false},{"type":"ExpressionStatement","start":867,"end":873,"expression":{"type":"CallExpression","start":867,"end":872,"callee":{"type":"CallExpression","start":867,"end":870,"callee":{"type":"Identifier","start":867,"end":868,"name":"f"},"arguments":[]},"arguments":[]}}],"sourceType":"script"}

blocks: [{"type":"Program","start":0,"end":874,"body":[{"type":"FunctionDeclaration","start":804,"end":866,"id":{"type":"Identifier","start":813,"end":814,"name":"f"},"params":[],"body":{"type":"BlockStatement","start":816,"end":866,"body":[{"type":"VariableDeclaration","start":819,"end":829,"declarations":[{"type":"VariableDeclarator","start":823,"end":828,"id":{"type":"Identifier","start":823,"end":824,"name":"a"},"init":{"type":"Literal","start":827,"end":828,"value":1,"raw":"1"}}],"kind":"var"},{"type":"ReturnStatement","start":831,"end":864,"argument":{"type":"FunctionExpression","start":838,"end":864,"id":null,"params":[],"body":{"type":"BlockStatement","start":848,"end":864,"body":[{"type":"ExpressionStatement","start":849,"end":863,"expression":{"type":"CallExpression","start":849,"end":863,"callee":{"type":"MemberExpression","start":849,"end":860,"object":{"type":"Identifier","start":849,"end":856,"name":"console"},"property":{"type":"Identifier","start":857,"end":860,"name":"log"},"computed":false},"arguments":[{"type":"Identifier","start":861,"end":862,"name":"a"}]}}]},"expression":false,"declarations":{},"label":".anonymous_3"}}]},"expression":false,"declarations":{},"label":".f_2"},{"type":"ExpressionStatement","start":867,"end":873,"expression":{"type":"CallExpression","start":867,"end":872,"callee":{"type":"CallExpression","start":867,"end":870,"callee":{"type":"Identifier","start":867,"end":868,"name":"f"},"arguments":[]},"arguments":[]}}],"sourceType":"script","declarations":{},"label":".main_1"},{"type":"FunctionDeclaration","start":804,"end":866,"id":{"type":"Identifier","start":813,"end":814,"name":"f"},"params":[],"body":{"type":"BlockStatement","start":816,"end":866,"body":[{"type":"VariableDeclaration","start":819,"end":829,"declarations":[{"type":"VariableDeclarator","start":823,"end":828,"id":{"type":"Identifier","start":823,"end":824,"name":"a"},"init":{"type":"Literal","start":827,"end":828,"value":1,"raw":"1"}}],"kind":"var"},{"type":"ReturnStatement","start":831,"end":864,"argument":{"type":"FunctionExpression","start":838,"end":864,"id":null,"params":[],"body":{"type":"BlockStatement","start":848,"end":864,"body":[{"type":"ExpressionStatement","start":849,"end":863,"expression":{"type":"CallExpression","start":849,"end":863,"callee":{"type":"MemberExpression","start":849,"end":860,"object":{"type":"Identifier","start":849,"end":856,"name":"console"},"property":{"type":"Identifier","start":857,"end":860,"name":"log"},"computed":false},"arguments":[{"type":"Identifier","start":861,"end":862,"name":"a"}]}}]},"expression":false,"declarations":{},"label":".anonymous_3"}}]},"expression":false,"declarations":{},"label":".f_2"},{"type":"FunctionExpression","start":838,"end":864,"id":null,"params":[],"body":{"type":"BlockStatement","start":848,"end":864,"body":[{"type":"ExpressionStatement","start":849,"end":863,"expression":{"type":"CallExpression","start":849,"end":863,"callee":{"type":"MemberExpression","start":849,"end":860,"object":{"type":"Identifier","start":849,"end":856,"name":"console"},"property":{"type":"Identifier","start":857,"end":860,"name":"log"},"computed":false},"arguments":[{"type":"Identifier","start":861,"end":862,"name":"a"}]}}]},"expression":false,"declarations":{},"label":".anonymous_3"}]

original codes: [
    9,  0, 102,  0,   0, 16,   2,  7,   0,   0,   0, 0,
    0,  0,   0,  0,   8,  0,   0,  0,  43,  48,   9, 0,
  102,  0,   0, 18,  10,  2,   2,  9,   0, 102,   0, 0,
   17,  4,  49,  4,  49, 10,  51, 10,   9,   0,  97, 0,
    0, 16,   7, 63, 240,  0,   0,  0,   0,   0,   0, 9,
    0, 97,   0,  0,  18, 10,   2,  7,   0,   0,   0, 0,
    0,  0,   0,  0,   8,  0,   0,  0,  85,  48,  51, 1,
   51, 10,   9,  0,  99,  0, 111,  0, 110,   0, 115, 0,
  111,  0, 108,  0,
  ... 38 more items
]

instructions: [{"type":"label","name":".main_1"},{"type":"opcode","opcode":9},{"type":"data","rawData":"f","data":[0,102,0,0]},{"type":"opcode","opcode":16},{"type":"opcode","opcode":2},{"type":"opcode","opcode":7},{"type":"data","rawData":0,"data":[0,0,0,0,0,0,0,0]},{"type":"opcode","opcode":8},{"type":"reference","label":".f_2"},{"type":"opcode","opcode":48},{"type":"opcode","opcode":9},{"type":"data","rawData":"f","data":[0,102,0,0]},{"type":"opcode","opcode":18},{"type":"opcode","opcode":10},{"type":"opcode","opcode":2},{"type":"opcode","opcode":2},{"type":"opcode","opcode":9},{"type":"data","rawData":"f","data":[0,102,0,0]},{"type":"opcode","opcode":17},{"type":"opcode","opcode":4},{"type":"opcode","opcode":49},{"type":"opcode","opcode":4},{"type":"opcode","opcode":49},{"type":"opcode","opcode":10},{"type":"opcode","opcode":51},{"type":"label","name":".f_2"},{"type":"opcode","opcode":10},{"type":"opcode","opcode":9},{"type":"data","rawData":"a","data":[0,97,0,0]},{"type":"opcode","opcode":16},{"type":"opcode","opcode":7},{"type":"data","rawData":1,"data":[63,240,0,0,0,0,0,0]},{"type":"opcode","opcode":9},{"type":"data","rawData":"a","data":[0,97,0,0]},{"type":"opcode","opcode":18},{"type":"opcode","opcode":10},{"type":"opcode","opcode":2},{"type":"opcode","opcode":7},{"type":"data","rawData":0,"data":[0,0,0,0,0,0,0,0]},{"type":"opcode","opcode":8},{"type":"reference","label":".anonymous_3"},{"type":"opcode","opcode":48},{"type":"opcode","opcode":51},{"type":"opcode","opcode":1},{"type":"opcode","opcode":51},{"type":"label","name":".anonymous_3"},{"type":"opcode","opcode":10},{"type":"opcode","opcode":9},{"type":"data","rawData":"console","data":[0,99,0,111,0,110,0,115,0,111,0,108,0,101,0,0]},{"type":"opcode","opcode":17},{"type":"opcode","opcode":13},{"type":"opcode","opcode":9},{"type":"data","rawData":"log","data":[0,108,0,111,0,103,0,0]},{"type":"opcode","opcode":64},{"type":"opcode","opcode":4},{"type":"opcode","opcode":13},{"type":"opcode","opcode":7},{"type":"data","rawData":0,"data":[0,0,0,0,0,0,0,0]},{"type":"opcode","opcode":9},{"type":"data","rawData":"a","data":[0,97,0,0]},{"type":"opcode","opcode":17},{"type":"opcode","opcode":65},{"type":"opcode","opcode":10},{"type":"opcode","opcode":49},{"type":"opcode","opcode":10},{"type":"opcode","opcode":1},{"type":"opcode","opcode":51}]

instructions prettier:
.main_1:
        // 入栈字符串'f'
        STR(09)
        "f" (00 66 00 00)
        // 出栈并在scope添加属性f(其值为undefined)
        VAR(10)()
        // 入栈null
        NULL(02)
        // 入栈数字0(函数参数数组长度)
        NUM(07)
        0 (00 00 00 00 00 00 00 00)
        // 入栈函数地址'f_2'
        ADDR(08)
        .f_2
        // 出栈三次(地址/参数长度/名称)并根据出栈值建立函数对象并入栈
        FUNC(30)
        // 入栈字符串'f'
        STR(09)
        "f" (00 66 00 00)
        // 出栈两次(字符串f和函数对象),然后根据两个出栈值在scope创建f属性
        OUT(12)
        // 出栈
        POP(0a)
        // 入栈null值
        NULL(02)
        // 入栈null值
        NULL(02)
        // 入栈字符串'f'
        STR(09)
        "f" (00 66 00 00)
        // 出栈并根据出栈值"f"找到函数对象并入栈
        LOAD(11)
        // 入栈空数组
        ARR(04)
        // 连续出栈参数, 函数, this变量, 然后调用函数并将返回值入栈
        CALL(31)
        // 入栈空数组
        ARR(04)
        // 连续出栈参数, 函数, this变量, 然后调用函数并将返回值入栈
        CALL(31)
        // 出栈
        POP(0a)
        // 函数返回
        RET(33)
.f_2:
        // 栈顶出栈
        POP(0a)
        // 字符串a入栈
        STR(09)
        "a" (00 61 00 00)
        // 数字7入栈
        VAR(10)
        NUM(07)
        1 (3f f0 00 00 00 00 00 00)
        STR(09)
        "a" (00 61 00 00)
        // 变量从栈顶弹出, 赋值给scope的同名属性
        OUT(12)
        POP(0a)
        NULL(02)
        NUM(07)
        0 (00 00 00 00 00 00 00 00)
        // 入栈要调用的匿名函数的地址
        ADDR(08)
        .anonymous_3
        // 根据上一步的函数地址、参数数量、函数名称,创建函数对象,并将其入栈
        FUNC(30)
        // 函数返回
        RET(33)
        UNDEF(01)
        RET(33)
.anonymous_3:
        // 栈顶出栈
        POP(0a)
        // 字符串"console"入栈
        STR(09)
        "console" (00 63 00 6f 00 6e 00 73 00 6f 00 6c 00 65 00 00)
        // 出栈并根据出栈值"console"找到对象并入栈
        LOAD(11)
        TOP(0d)
        // 字符串"log"入栈
        STR(09)
        "log" (00 6c 00 6f 00 67 00 00)
        // 出栈并根据出栈值"log"找到对象属性并入栈
        GET(40)
        // ??
        ARR(04)
        TOP(0d)
        NUM(07)
        0 (00 00 00 00 00 00 00 00)
        // 字符串"a"入栈
        STR(09)
        "a" (00 61 00 00)
        // 出栈并根据出栈值"a"找到对象并入栈
        LOAD(11)
        // ??
        SET(41)
        // a值出栈
        POP(0a)
        // 调用函数
        CALL(31)
        // ??
        POP(0a)
        UNDEF(01)
        // 函数返回
        RET(33)

stack: []

scope: [Object: null prototype] {}

code executed: STR

stack: [ 'f' ]

scope: [Object: null prototype] {}

code executed: VAR

stack: []

scope: [Object: null prototype] { f: undefined }

code executed: NULL

stack: [ null ]

scope: [Object: null prototype] { f: undefined }

code executed: NUM

stack: [ null, 0 ]

scope: [Object: null prototype] { f: undefined }

code executed: ADDR

stack: [ null, 0, 43 ]

scope: [Object: null prototype] { f: undefined }

code executed: FUNC

stack: [ [Function: null] ]

scope: [Object: null prototype] { f: undefined }

code executed: STR

stack: [ [Function: null], 'f' ]

scope: [Object: null prototype] { f: undefined }

code executed: OUT

stack: [ [Function: null] ]

scope: [Object: null prototype] { f: [Function: null] }

code executed: POP

stack: []

scope: [Object: null prototype] { f: [Function: null] }

code executed: NULL

stack: [ null ]

scope: [Object: null prototype] { f: [Function: null] }

code executed: NULL

stack: [ null, null ]

scope: [Object: null prototype] { f: [Function: null] }

code executed: STR

stack: [ null, null, 'f' ]

scope: [Object: null prototype] { f: [Function: null] }

code executed: LOAD

stack: [ null, null, [Function: null] ]

scope: [Object: null prototype] { f: [Function: null] }

code executed: ARR

stack: [ null, null, [Function: null], [] ]

scope: [Object: null prototype] { f: [Function: null] }

code executed: CALL

stack: [ [] ]

scope: [Object: null prototype] { this: null }

code executed: POP

stack: []

scope: [Object: null prototype] { this: null }

code executed: STR

stack: [ 'a' ]

scope: [Object: null prototype] { this: null }

code executed: VAR

stack: []

scope: [Object: null prototype] { this: null, a: undefined }

code executed: NUM

stack: [ 1 ]

scope: [Object: null prototype] { this: null, a: undefined }

code executed: STR

stack: [ 1, 'a' ]

scope: [Object: null prototype] { this: null, a: undefined }

code executed: OUT

stack: [ 1 ]

scope: [Object: null prototype] { this: null, a: 1 }

code executed: POP

stack: []

scope: [Object: null prototype] { this: null, a: 1 }

code executed: NULL

stack: [ null ]

scope: [Object: null prototype] { this: null, a: 1 }

code executed: NUM

stack: [ null, 0 ]

scope: [Object: null prototype] { this: null, a: 1 }

code executed: ADDR

stack: [ null, 0, 85 ]

scope: [Object: null prototype] { this: null, a: 1 }

code executed: FUNC

stack: [ [Function: null] ]

scope: [Object: null prototype] { this: null, a: 1 }

code executed: RET

stack: [ null, [Function: null] ]

scope: [Object: null prototype] { f: [Function: null] }

code executed: ARR

stack: [ null, [Function: null], [] ]

scope: [Object: null prototype] { f: [Function: null] }

code executed: CALL

stack: [ [] ]

scope: [Object: null prototype] { this: null }

code executed: POP

stack: []

scope: [Object: null prototype] { this: null }

code executed: STR

stack: [ 'console' ]

scope: [Object: null prototype] { this: null }

code executed: LOAD

stack: [
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  }
]

scope: [Object: null prototype] { this: null }

code executed: TOP

stack: [
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  },
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  }
]

scope: [Object: null prototype] { this: null }

code executed: STR

stack: [
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  },
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  },
  'log'
]

scope: [Object: null prototype] { this: null }

code executed: GET

stack: [
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  },
  [Function: log]
]

scope: [Object: null prototype] { this: null }

code executed: ARR

stack: [
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  },
  [Function: log],
  []
]

scope: [Object: null prototype] { this: null }

code executed: TOP

stack: [
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  },
  [Function: log],
  [],
  []
]

scope: [Object: null prototype] { this: null }

code executed: NUM

stack: [
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  },
  [Function: log],
  [],
  [],
  0
]

scope: [Object: null prototype] { this: null }

code executed: STR

stack: [
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  },
  [Function: log],
  [],
  [],
  0,
  'a'
]

scope: [Object: null prototype] { this: null }

code executed: LOAD

stack: [
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  },
  [Function: log],
  [],
  [],
  0,
  1
]

scope: [Object: null prototype] { this: null }

code executed: SET

stack: [
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  },
  [Function: log],
  [ 1 ],
  1
]

scope: [Object: null prototype] { this: null }

code executed: POP

stack: [
  Object [console] {
    log: [Function: log],
    warn: [Function: warn],
    dir: [Function: dir],
    time: [Function: time],
    timeEnd: [Function: timeEnd],
    timeLog: [Function: timeLog],
    trace: [Function: trace],
    assert: [Function: assert],
    clear: [Function: clear],
    count: [Function: count],
    countReset: [Function: countReset],
    group: [Function: group],
    groupEnd: [Function: groupEnd],
    table: [Function: table],
    debug: [Function: debug],
    info: [Function: info],
    dirxml: [Function: dirxml],
    error: [Function: error],
    groupCollapsed: [Function: groupCollapsed],
    Console: [Function: Console],
    profile: [Function: profile],
    profileEnd: [Function: profileEnd],
    timeStamp: [Function: timeStamp],
    context: [Function: context]
  },
  [Function: log],
  [ 1 ]
]

scope: [Object: null prototype] { this: null }

code executed: CALL
1

stack: [ undefined ]

scope: [Object: null prototype] { this: null }

code executed: POP

stack: []

scope: [Object: null prototype] { this: null }

code executed: UNDEF

stack: [ undefined ]

scope: [Object: null prototype] { this: null }

code executed: RET

stack: [ undefined ]

scope: [Object: null prototype] { f: [Function: null] }

code executed: POP

stack: []

scope: [Object: null prototype] { f: [Function: null] }

code executed: RET